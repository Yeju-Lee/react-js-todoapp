{"version":3,"sources":["components/InputBox.jsx","components/ToDoItem.jsx","components/ToDoItemList.jsx","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputBox","todoList","setTodoList","useState","text","setText","inputRef","useRef","className","type","name","value","ref","placeholder","onChange","e","target","onClick","nextTodoList","concat","id","length","checked","deleted","current","focus","ToDoItem","todoItem","editInputRef","edited","setEdited","newText","setNewText","useEffect","map","item","window","confirm","ToDoItemList","title","checkedList","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d66f4750.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst InputBox = ({ todoList, setTodoList }) => {\r\n  \r\n  const [text, setText] = useState('');\r\n  const inputRef = useRef(null); // focusing\r\n\r\n  // input이 변화하는 event 발생 시, \r\n  // e.target에 있는 <input.../>으로부터 value값을 가져옴\r\n  const onChangeInput = (e) => {\r\n    setText(e.target.value);\r\n  }; \r\n\r\n  // 버튼 클릭 시 실행되는 메소드\r\n  const onClickAddButton = () => {\r\n\r\n    // input에 입력한 값을 todoList에 추가함 by concat\r\n    const nextTodoList = todoList.concat({\r\n      id: todoList.length,\r\n      text, // todo 아이템 내용\r\n      checked: false,\r\n      deleted: false,\r\n    });\r\n    setTodoList(nextTodoList);\r\n\r\n    setText(''); // input 값 초기화\r\n    inputRef.current.focus(); // input으로 focusing\r\n  }\r\n\r\n  return (\r\n    <div className=\"todoapp__inputbox\">\r\n      <input \r\n        type=\"text\" \r\n        name=\"todoItem\" \r\n        value={ text }\r\n        ref={ inputRef }\r\n        placeholder=\"할 일을 입력해주세요\" \r\n        className=\"todoapp__inputbox-inp\"\r\n        onChange={ onChangeInput } // input이 변하는 event발생 시 onChangeInput 실행\r\n      />\r\n      <button \r\n        type=\"submit\" \r\n        className=\"todoapp__inputbox-add-btn\"\r\n        onClick={ onClickAddButton } // button을 눌렀을 시 onClickAddButton 실행\r\n      >\r\n        추가\r\n      </button>\r\n    </div>\r\n  )\r\n};\r\n\r\n// Props 값 검증\r\nInputBox.propTypes = {\r\n  // todoList는 배열이어야 함\r\n  todoList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n  // setTodoList는 함수여야 함\r\n  setTodoList: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default InputBox;","import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToDoItem = ({ todoItem, todoList, setTodoList }) => {\r\n\r\n  const editInputRef = useRef(null);\r\n  \r\n  const onChangeCheckbox = () => {\r\n    const nextTodoList = todoList.map((item) => ({\r\n      ...item,\r\n      checked: item.id === todoItem.id ? !item.checked : item.checked,\r\n    }));\r\n    setTodoList(nextTodoList);\r\n  };\r\n  \r\n  // 수정 모드인지 확인하기 위한 플래그 값\r\n  const [edited, setEdited] = useState(false);\r\n  \r\n  const onClickEditButton = () => {\r\n    setEdited(true);\r\n  };\r\n  \r\n  // 수정 시 새로운 아이템 내용을 담을 state\r\n  const [newText, setNewText] = useState(todoItem.text);\r\n\r\n  const onChangeEditInput = (e) => {\r\n    setNewText(e.target.value);\r\n  };\r\n\r\n  const onClickSubmitButton = () => {\r\n\r\n    // 새로운 아이템 내용을 넣어줌\r\n    const nextTodoList = todoList.map((item) => ({\r\n      ...item,\r\n      text: item.id === todoItem.id ? newText : item.text,\r\n    }));\r\n    setTodoList(nextTodoList); // 새로운 아이템 리스트를 넣어줌\r\n\r\n    setEdited(false); // 수정모드를 읽기모드로 변경\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (edited) {\r\n      editInputRef.current.focus();\r\n    }\r\n  }, [edited]);\r\n\r\n  const onClickDeleteButton = () => {\r\n    if (window.confirm('정말로 지우실건가요?')) {\r\n      const nextTodoList = todoList.map((item) => ({\r\n        ...item,\r\n        deleted: item.id === todoItem.id ? true : item.deleted,\r\n      }));\r\n      setTodoList(nextTodoList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className=\"todoapp__item\">\r\n      <input \r\n        type=\"checkbox\" \r\n        className=\"todoapp__item-checkbox\"\r\n        checked={ todoItem.checked } // 체크 or 체크해제 구분하기 위함\r\n        onChange={ onChangeCheckbox } // 체크함에 따라 checkde값이 toggle 됨\r\n      />\r\n\r\n      {\r\n        edited ? (\r\n          <input \r\n            type=\"text\"\r\n            className=\"todoapp__item-edit-input\"\r\n            value={ newText }\r\n            ref={ editInputRef }\r\n            onChange={ onChangeEditInput }\r\n          />\r\n        ) : (\r\n          <span \r\n            className={`todoapp__item-ctx ${\r\n              todoItem.checked ? \"todoapp__item-ctx-checked\" : \"\"\r\n            }`}\r\n          >\r\n            {todoItem.text}\r\n          </span>\r\n        )\r\n      }\r\n\r\n      {/* 수정버튼, 완료한 일은 null 반환해 보이지 않게 함 */}\r\n      {\r\n        !todoItem.checked ? (\r\n          edited ? (\r\n            <button \r\n            type=\"button\" \r\n            className=\"todoapp__item-edit-btn\"\r\n            onClick={ onClickSubmitButton }\r\n            >\r\n              done\r\n            </button>\r\n          ) : (\r\n            <button \r\n              type=\"button\" \r\n              className=\"todoapp__item-edit-btn\"\r\n              onClick={ onClickEditButton }\r\n            >\r\n              edit\r\n            </button>\r\n          )\r\n        ) : null\r\n      }\r\n\r\n      <button \r\n        type=\"button\" \r\n        className=\"todoapp__item-delete-btn\"\r\n        onClick={ onClickDeleteButton }\r\n      >\r\n        del\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nToDoItem.propTypes = {\r\n  todoItem: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    text: PropTypes.string.isRequired,\r\n  }),\r\n  todoList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  setTodoList: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoItemList = ({ title, todoList, setTodoList, checkedList }) => (\r\n  <div className=\"todoapp__list\">\r\n    <p className=\"todoapp__list-tit\">{ title }</p>\r\n    <ul className=\"todoapp__list-ul\">\r\n      { todoList && // todoList가 있을때만 출력\r\n\r\n        // ToDoItem을 출력 by map\r\n        todoList.map((todoItem) => {\r\n\r\n          // checkedList 값에 따라 '할 일' 또는 '완료한 할 일'을 출력\r\n\r\n          // 화면에 아무것도 출력하고 싶지 않은 경우, \r\n          // 이 코드가 없으면 '할 일'과 '완료한 할 일' 양쪽에 항목이 뜸\r\n          if (checkedList !== todoItem.checked) return null;\r\n\r\n          // 삭제한 항목인 경우,\r\n          // 출력하지 않음 (실제로 데이터가 지워지는게 아님)\r\n          if (todoItem.deleted) return null;\r\n\r\n          return (\r\n            <ToDoItem \r\n              key={ todoItem.id } // map 사용 시 필요, 고유한 값으로 지정 필요\r\n              todoItem={ todoItem }\r\n              todoList={ todoList }\r\n              setTodoList={ setTodoList }\r\n            />\r\n          );\r\n        })}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nToDoItemList.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  todoList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  setTodoList: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ToDoItemList;","import React, { useState } from 'react';\r\nimport InputBox from '../components/InputBox';\r\nimport ToDoItemList from '../components/ToDoItemList';\r\n\r\nconst Home = () => {\r\n\r\n  // todo 아이템을 담을 배열\r\n  const [todoList, setTodoList] = useState([]);\r\n\r\n  return (\r\n    <div className=\"homepage__container\">\r\n      <InputBox \r\n        todoList={ todoList }\r\n        setTodoList={ setTodoList }\r\n      />\r\n      {/* 할 일 아이템 리스트 */}\r\n      <ToDoItemList\r\n        title={ '할 일' }\r\n        todoList={ todoList }\r\n        setTodoList={ setTodoList }\r\n        checkedList={ false }\r\n      /> \r\n      {/* 완료한 아이템 리스트 */}\r\n      <ToDoItemList\r\n        title={ '완료한 할 일' }\r\n        todoList={ todoList }\r\n        setTodoList={ setTodoList }\r\n        checkedList={ true }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import './App.css';\nimport React from 'react';\nimport Home from './pages/Home';\n\nconst App = () => <Home />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}